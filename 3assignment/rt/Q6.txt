#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 200 //The number digit limitation

typedef struct _btnode{
	int item;
	struct _btnode *left;
	struct _btnode *right;
} BTNode;   // You should not change the definition of BTNode

typedef struct _node{
     BTNode* item;
     struct _node *next;
}StackNode;

typedef struct _stack{
   int size;
   StackNode *head;
}Stack;

void deleteTree(BTNode **root);

void createExpTree(BTNode** root,char* prefix);
void printTree(BTNode *node);
void printTreePostfix(BTNode *node);
double computeTree(BTNode *node);

void push(Stack *sPtr,  BTNode* item);
int pop(Stack *sPtr);
BTNode *peek(Stack s);
int isEmptyStack(Stack s);

int main()
{
    char prefix[SIZE];
    BTNode* root=NULL;

    //printf("Enter an prefix expression:\n");
    gets(prefix);

    createExpTree(&root, prefix);

    // printf("The Infix Expression:\n");
    printTree(root);
    printf("\n");
    //printf("The Postfix (Reverse Polish) Expression:\n");
    printTreePostfix(root);
    printf("\n");
    //printf("Answer ");
    printf("%.2f\n", computeTree(root));
    deleteTree(&root);
    return 0;
}

void push(Stack *sPtr, BTNode *item){
    StackNode *newNode;
    newNode = malloc(sizeof(StackNode));
    newNode->item = item;
    newNode->next = sPtr->head;
    sPtr->head = newNode;
    sPtr->size++;
}

int pop(Stack *sPtr){
    if(sPtr == NULL || sPtr->head == NULL){
        return 0;
    }
    else{
       StackNode *temp = sPtr->head;
       sPtr->head = sPtr->head->next;
       free(temp);
       sPtr->size--;
       return 1;
    }
}

BTNode *peek(Stack s){
    return s.head->item;
}

int isEmptyStack(Stack s){
     if(s.size == 0) return 1;
     else return 0;
}

void deleteTree(BTNode **root){
    BTNode* temp;
    if(*root !=NULL)
    {
        temp = (*root)->right;
        deleteTree(&((*root)->left));
        free(*root);
        *root = NULL;
        deleteTree(&temp);
    }
}
// For isdigit function
#include <ctype.h>

void createExpTree(BTNode** root,char* prefix)
{
 //Write your code here
    (*root) = malloc(sizeof(BTNode));
    // Split str into tokens, delimiter is " "
    // Note: is the thing we trying remove double check again
    char *split = strtok(prefix, " ");   
    
    if(isdigit(split[0]))
    {       
        (*root)->item = atoi(split);
        (*root)->left = (*root)->right = NULL;
    }
    else 
    {
        // Recursive
        (*root)->item = split[0];
        createExpTree(&(*root)->left, NULL); 
        createExpTree(&(*root)->right, NULL);
    }
}

void printTree(BTNode *node){
    //Write your code here
    // In order
    if(node == NULL) 
    {
        return;
    }
    
    if( node->left == NULL && node->right == NULL )  
    {    
        printf("%d", node->item);
    }
    else 
    {
        // Double check                                          
        printTree(node->left);
        printf(" %c ", (char)node->item);
        printTree(node->right);
    }

}


void printTreePostfix(BTNode *node){
   //Write your code here
   
    // Double check my post-order traversal

    if(node == NULL) 
    {
        return;
    }

    printTreePostfix(node->left);
    printTreePostfix(node->right);
    
    if(node->left == NULL && node->right == NULL) 
    {
        printf("%d ",node->item);
    }    
    else                                        
    {
        // Char
        printf("%c ",(char)(node->item));
    }
}

double computeTree(BTNode *node){
//Write your code here
    if(node == NULL)
    {
        //printf("Checkpoint1\n");
        return 0;
    }

    if(node->left == NULL && node->right == NULL)
    {
        //printf("Checkpoint2\n"); 
        // Double
        return (double)(node->item);
    }
    
    //printf("Checkpoint3\n");

    double left_node_item = computeTree(node->left);
    //printf("Checkpoint left check\n");
    double right_node_item = computeTree(node->right);
    //printf("Checkpoint right check\n");

    // + - * / check
    if(node->item == '+')
    {
        return left_node_item + right_node_item;
    }
    else if(node->item == '-')
    {
        return left_node_item - right_node_item;
    }
    else if(node->item == '*')
    {
        return left_node_item * right_node_item;
    }
    else
    {
        return left_node_item / right_node_item;
    }
    
}